"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var misc_utils_of_mine_generic_1 = require("misc-utils-of-mine-generic");
var base64_1 = require("./base64");
var buffer_1 = require("./buffer");
var potrace_1 = require("./potrace");
/**
 * Converts a PNG bitmap image to a SVG vector graphics. Other input supported besides PNG/SVG are JPEG and
 * BMP. Notice that the output SVG won't respect image colors and only will be monochrome. If no --color
 * parameter is given it will produce a black-white (background transparent) image.
 */
function png2svg(options) {
    return __awaiter(this, void 0, void 0, function () {
        var buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options.fillStrategy === 'none') {
                        options.fillStrategy = true;
                    }
                    if (typeof options.steps === 'string' && options.steps.includes(',')) {
                        console.log(options.steps.split(','), options.steps.split(',').map(function (e) { return parseInt(e); }));
                        options.steps = options.steps.split(',').map(function (e) { return parseInt(e); });
                    }
                    // options.blackOnWhite = options.blackOnWhite !== true;
                    options.optCurve = options.noCurveOptimization !== false;
                    options.debug && console.log("Options: " + JSON.stringify(__assign({}, options, { input: null })));
                    if (!buffer_1.BufferClass.isBuffer(options.input)) return [3 /*break*/, 1];
                    buffer = options.input;
                    return [3 /*break*/, 4];
                case 1:
                    if (!(!misc_utils_of_mine_generic_1.isNode() && typeof Blob !== 'undefined' && options.input instanceof Blob)) return [3 /*break*/, 3];
                    return [4 /*yield*/, buffer_1.blobToBuffer(options.input)];
                case 2:
                    buffer = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    if (typeof options.input === 'string' && options.input.startsWith('data:')) {
                        buffer = buffer_1.BufferClass.from(base64_1.urlToBase64(options.input), 'base64');
                    }
                    else if (typeof options.input === 'string' && base64_1.isBase64(options.input)) {
                        buffer = buffer_1.BufferClass.from(Base64.atob(options.input), 'binary');
                    }
                    else if (typeof options.input === 'string') {
                        buffer = buffer_1.BufferClass.from(options.input, 'binary');
                    }
                    else if (options.input instanceof Uint8Array && !buffer_1.BufferClass.isBuffer(options.input)) {
                        buffer = buffer_1.typedArrayToBuffer(options.input);
                    }
                    _a.label = 4;
                case 4:
                    if (!buffer) {
                        throw new Error('Invalid input option, must be one of Buffer|Uint8Array|Blob|data-url string|binary string');
                    }
                    return [4 /*yield*/, potrace_1.potracePosterize(buffer, options)];
                case 5: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.png2svg = png2svg;
//# sourceMappingURL=png2svg.js.map