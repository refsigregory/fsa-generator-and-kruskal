"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var glob_1 = require("glob");
var misc_utils_of_mine_generic_1 = require("misc-utils-of-mine-generic");
var path_1 = require("path");
var png2svg_1 = require("../png2svg");
function png2svgCli(o) {
    return __awaiter(this, void 0, void 0, function () {
        var input, error_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    preconditions(o);
                    o.debug && console.log("CLI Options: " + JSON.stringify(__assign({}, o, { input: null })));
                    input = (typeof o.input === 'string' ? glob_1.sync(o.input).filter(fs_1.existsSync) : [])
                        .map(function (f) { return ({
                        name: f,
                        content: fs_1.readFileSync(f)
                    }); });
                    if (o.output && !fs_1.existsSync(o.output)) {
                        fs_1.mkdirSync(o.output, { recursive: true });
                    }
                    return [4 /*yield*/, misc_utils_of_mine_generic_1.serial(input.map(function (input) { return function () { return __awaiter(_this, void 0, void 0, function () {
                            var result, _a, file, error_2;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 2, , 3]);
                                        o.debug && console.log('Rendering ' + input.name);
                                        _a = { name: input.name + '.svg' };
                                        return [4 /*yield*/, png2svg_1.png2svg(__assign({}, o, { input: input.content }))];
                                    case 1:
                                        result = (_a.content = _b.sent(), _a);
                                        if (o.output) {
                                            file = path_1.join(o.output, path_1.basename(result.name));
                                            o.debug && console.log('Writing ' + file);
                                            fs_1.writeFileSync(file, result.content);
                                        }
                                        else {
                                            process.stdout.write(result.content);
                                        }
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_2 = _b.sent();
                                        console.error('ERROR while rendering file ' + input.name);
                                        console.error(error_2);
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); }; }))];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    fail(error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.png2svgCli = png2svgCli;
function preconditions(options) {
    if (options.help) {
        printHelp();
        process.exit(0);
    }
    if (!options.input) {
        fail("--input is mandatory but one was not given. Aborting.");
    }
}
function fail(s) {
    console.error(s);
    process.exit(1);
}
function printHelp() {
    console.log("\nUsage: \n\npng2svg --input \"**/*pics*/*.png\" --output ../svgs\npng2svg --input graph1.png > graph1.svg\n");
}
//# sourceMappingURL=png2svgCli.js.map