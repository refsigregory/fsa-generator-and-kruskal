"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var svg_png_converter_1 = require("svg-png-converter");
var library_1 = require("./library");
function renderDot(options) {
    return __awaiter(this, void 0, void 0, function () {
        var input, s, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    options.debug && console.log('renderDot options', options);
                    if (!(!options.format || !['jpeg', 'png', 'gif'].includes(options.format))) return [3 /*break*/, 2];
                    return [4 /*yield*/, library_1.getLibrary().renderString(options.input, options)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2: return [4 /*yield*/, library_1.getLibrary().renderString(options.input, __assign({}, options, { format: 'svg' }))];
                case 3:
                    input = _a.sent();
                    return [4 /*yield*/, svg_png_converter_1.svg2png(__assign({}, options, { input: input, 
                            // encoding: 'dataURL',           //TODO: add to options
                            format: (options.format || 'png') }))];
                case 4:
                    s = _a.sent();
                    return [2 /*return*/, s];
                case 5: return [3 /*break*/, 7];
                case 6:
                    error_1 = _a.sent();
                    // console.error('renderDot() error ', error)
                    library_1.terminateLibrary();
                    throw error_1;
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.renderDot = renderDot;
//  we could include this options for svg output: 
// interface IToSVGOptions {
// 	/**
// 	 * If true xml tag is not included
// 	 */
// 	suppressPreamble: boolean;
// 	/**
// 	 * SVG viewbox object
// 	 */
// 	viewBox: {
//     /**
//      * x-cooridnate of viewbox
//      */
//     x: number;
//     /**
//      * y-coordinate of viewbox
//      */
//     y: number;
//     /**
//      * Width of viewbox
//      */
//     width: number;
//     /**
//      * Height of viewbox
//      */
//     height: number;
//   };
// 	/**
// 	 * Encoding of SVG output
// 	 */
// 	encoding: string;
// 	/**
// 	 * desired width of svg with or without units
// 	 */
// 	width: number;
// 	/**
// 	 * desired height of svg with or without units
// 	 */
// 	height: number;
// }
// same for jpeg, png : 
// interface IDataURLOptions {
// 	/**
// 	 * The format of the output image. Either "jpeg" or "png"
// 	 */
// 	format?: string;
// 	/**
// 	 * Quality level (0..1). Only used for jpeg
// 	 */
// 	quality?: number;
// 	/**
// 	 * Multiplier to scale by
// 	 */
// 	multiplier?: number;
// 	/**
// 	 * Cropping left offset. Introduced in v1.2.14
// 	 */
// 	left?: number;
// 	/**
// 	 * Cropping top offset. Introduced in v1.2.14
// 	 */
// 	top?: number;
// 	/**
// 	 * Cropping width. Introduced in v1.2.14
// 	 */
// 	width?: number;
// 	/**
// 	 * Cropping height. Introduced in v1.2.14
// 	 */
// 	height?: number;
// 	enableRetinaScaling?: boolean;
// 	withoutTransform?: boolean;
// 	withoutShadow?: boolean;
// }
//# sourceMappingURL=renderDot.js.map